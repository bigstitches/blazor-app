@* @page "/snake" *@
@inject HttpClient Http

<style>
    #grid {
        position: relative;
        width: 400px;
        height: 400px;
        border: 1px solid black;
        display: grid;
        grid-template-rows: repeat(10, 1fr);
        grid-template-columns: repeat(10, 1fr);
        background-color: #f0f0f0;
    }

    .dot {
        position: absolute;
        width: 10px;
        height: 10px;
        background-color: red;
        border-radius: 50%;
        transform: translate(-50%, -50%);
    }

    .red-dot {
        background-color: red;
    }

    .green-dot {
        background-color: green;
    }
</style>

<div id="grid" tabindex="0" @onkeydown="HandleKeyPress" @ref="gridRef">
    <div class="dot red-dot" style="top:@snake.Head.X; left:@snake.Head.Y;"></div>
    <div class="dot green-dot" style="top:@food.Position.X; left:@food.Position.Y;"></div>
</div>

@code {
    private ElementReference gridRef;
    private Snake snake = new Snake();
    private Food food = new Food();
    private const double Step = 10;
    private const double GridSize = 400; // Grid width and height in pixels
    private Random random = new Random();

    private int Rows { get; set; } = 5; // Number of rows
    private int Columns { get; set; } = 5; // Number of columns

    private Timer? movementTimer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await gridRef.FocusAsync();
            // snake = new Snake();
            // food = new Food();
            RespawnGreenDot();

            // Start the timer for continuous movement
            movementTimer = new Timer(MoveDot, null, 0, 100); // Moves every 100ms
        }
    }

    private void MoveDot(object? state)
    {
        if (snake.HeadDirection == default) return;

        InvokeAsync(() =>
        {
            // Move the red dot based on the current direction
            snake.Move(snake.HeadDirection);

            // Check for collision between red dot and green dot
            if (snake.Head == food.Position)
            {
                RespawnGreenDot();
            }

            StateHasChanged(); // Update the UI
        });
    }

    private void RespawnGreenDot()
    {
        food.Position.X = (int)(random.Next(0, (int)(GridSize / Step)) * Step);
        food.Position.Y = (int)(random.Next(0, (int)(GridSize / Step)) * Step);
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowUp":
                snake.Move(Direction.UP);
                break;
            case "ArrowDown":
                snake.Move(Direction.DOWN);
                break;
            case "ArrowLeft":
                snake.Move(Direction.LEFT);
                break;
            case "ArrowRight":
                snake.Move(Direction.RIGHT);
                break;
        }
    }

    public void Dispose()
    {
        movementTimer?.Dispose(); // Stop the timer when the component is disposed
    }
}
